module RISCVCPU (clock);
    //Instruction opcodes
    parameter LD = 7'b000_0011, SD = 7'b010_0011, BEQ = 7'b110_0011, NOP = 32'h0000_0013, ALUop = 7'b001_0011;
    input clock;

    //Adicionado
    reg clk;

    reg [63:0] PC, Regs[0:31], IDEXA, IDEXB, EXMEMB, EXMEMALUOut, MEMWBValue;
    reg [31:0] IMemory[0:1023], DMemory[0:1023], //memorias separadas
               IFIDIR, IDEXIR, EXMEMIR, MEMWBIR; //registradores do pipeline
    wire[4:0] IFIDrs1, IFIDrs2, MEMWBrd; //acesso ao campo dos registradores
    wire[6:0] IDEXop, EXMEMop, MEMWBop; //acesso aos opcodes
    wire[63:0] Ain, Bin; //entradas da ULA

    //Definiindo os registradores do pipeline
    assign IFIDrs1 = IFIDIR[19:15]; //campo rs1
    assign IFIDrs2 = IFIDIR[24:20]; //campo rs2
    assign IDEXop = IDEXIR[6:0]; //opcode
    assign EXMEMop = EXMEMIR[6:0]; //opcode
    assign MEMWBop = MEMWBIR[6:0]; //opcode
    assign MEMWBrd = MEMWBIR[11:7]; //campo rd

    //Entradas da ALU vem diretamente dos registradores ID/EX do pipeline
    assign Ain = IDEXA;
    assign Bin = IDEXB;

    integer i; //utilizado para inicializar registradores

    initial
    begin
        PC = 0;
        IFIDIR = NOP; IDEXIR = NOP; EXMEMIR = NOP; MEMWBIR = NOP; //colocando os nops no registradores do pipeline

        $display("Iniciou");
        for(i = 0; i <= 31; i=i+1) Regs[i] = i; //inicializar registradores 
    end

    //Todas as instruções a seguir, acontecem em todos os estagios do pipeline, e usando <= elas acontecem simultaneamente
    always @(posedge clock)  
        begin 
            //Primeira instrução no pipeline é buscada e incrementa o PC
            IFIDIR <= IMemory[PC >> 2];
            PC <= PC + 4;
            $display("IF");

            //Segunda instrução do pipeline é buscar registradores
            IDEXA <= Regs[IFIDrs1]; IDEXB <= Regs[IFIDrs2]; //pega os dois registradores
            IDEXIR <= IFIDIR; //Passa o IR
            $display("ID");

            //Terceira intrução vai calcular o endereço ou realizar uma operação na ALU
            if(IDEXop == LD)
                EXMEMALUOut <= IDEXA + {{53{IDEXIR[31]}}, IDEXIR[30:20]};
            else if (IDEXop == SD)
                EXMEMALUOut <= IDEXA + {{53{IDEXIR[31]}}, IDEXIR[30:25], IDEXIR[11:7]};
            else if(IDEXop == ALUop)
                case (IDEXIR[31:25]) //caso para as varias instruções R-type
                    0: EXMEMALUOut <= Ain + Bin; //operação de soma
                default: ;//outras operações na ALU
                endcase
            EXMEMIR <= IDEXIR; EXMEMB <= IDEXB; //Passa a frente os registradores IR e B
            $display("EX");


            //estagio de memoria no pieline
            if(EXMEMop == ALUop) MEMWBValue <= EXMEMALUOut; //passa adiante o resultado da ULA
            else if(EXMEMop == LD) MEMWBValue <= DMemory[EXMEMALUOut >> 2];
            else if(EXMEMop == SD) DMemory[EXMEMALUOut >> 2] <= EXMEMB; //armazena
            MEMWBIR <= EXMEMIR; //passa a frente o IR
            $display("MEM");

            //Estagio WB
            if(((MEMWBop == LD) || (MEMWBop == ALUop)) && (MEMWBrd != 0)) //Atualiza registradpres se a operação load/ALU não é zero
            Regs[MEMWBrd] <= MEMWBValue;
            $display("WB");
        end
    endmodule

 module main;

   reg clk;

   RISCVCPU root(.clock(clk));


   initial begin
      clk = 0;
      
   end
endmodule /* main */
